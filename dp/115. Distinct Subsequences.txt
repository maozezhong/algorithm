/*
思路：
	动态规划：dp数组，dp[i][j]表示s[0...i]和t[0...j]能有几种可能
		当s[i]==t[j]的时候，dp[i][j] = dp[i-1][j-1] + dp[i-1][j]
		否则，dp[i][j] = dp[i-1][j]
	复杂度：
		时间：O(N^2)
		空间：O(N^2)
*/
class Solution {
public:
    int numDistinct(string s, string t) {
        if(s.size()==0 || t.size()==0 || s.size()<t.size())
            return 0;
        vector<vector<int>> dp(s.size(), vector<int>(t.size(), 0));
        //初始化第一行
        dp[0][0] = s[0]==t[0] ? 1 : 0;
        //初始化第一列
        for(int i=1;i<s.size();i++)
        {
            if(s[i]==t[0])
                dp[i][0] = dp[i-1][0] + 1;
            else
                dp[i][0] = dp[i-1][0];
        }
        
        for(int i=1;i<s.size();i++)
        {
            for(int j=1;j<t.size();j++)
            {
                if(s[i]==t[j])
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        
        return dp[s.size()-1][t.size()-1];
    }
};

/*
思路2：
	简化版dp
	空间O(N)
*/
class Solution {
public:
    int numDistinct(string s, string t) {
        if(s.size()==0 || t.size()==0 || s.size()<t.size())
            return 0;
        vector<int> dp(t.size(), 0);
        //初始化
        dp[0] = s[0]==t[0] ? 1 : 0;
        int pre, up;
        for(int i=1;i<s.size();i++)
        {
            pre = dp[0];
            dp[0] = s[i]==t[0] ? dp[0]+1 : dp[0];
            for(int j=1;j<t.size();j++)
            {
                up = dp[j];
                dp[j] = s[i]==t[j] ? pre+up : up;
                pre = up;
            }                
        }
        return dp[t.size()-1];
    }
};