/*
Leetcode 644. Maximum Average Subarray II 最大平均区间2
思想：
	二分查找
	线性搜索找是否存在大于平均值的子数组
*/
#include<iostream>
#include<algorithm>
#include <vector>
using namespace std;

class Solution{
public:
	double maxAverageSubarray(vector<int> nums, int k)
	{
		//step1 找最大值和最小值
		double max_ = INT_MIN, min_ = INT_MAX;
		for(int i=0;i<nums.size();i++)
		{
			max_ = nums[i]>max_ ? nums[i] : max_;
			min_ = nums[i]<min_ ? nums[i] : min_;
		}

		//step2 二分逼近最大平均值
		while(max_ - min_>0.000001)
		{
			double mid = (double)(max_+min_)/2.0;
			//Step3 线性搜索是否可能存在平均值比mid还大的子数组
			if(search(nums, k, mid))
				min_ = mid;
			else
				max_ = mid;
		}
		return max_;
	}

	bool search(vector<int> nums, int k, double mid)
	{
		vector<double> sums(nums.size()+1);
		sums[0] = 0;
		double min_ = 0.0;
		for(int i=1;i<=nums.size();i++)
		{
			//求偏差之和,sum[i]表示nums[0...i-1]-mid的和
			sums[i] = sums[i-1]+nums[i-1]-mid;
			//如果当前偏差之和大于最小值（k个元素之前的所有偏差的最小值）则说明存在长度至少为k的子数组平均值大于mid
			if(i>=k && sums[i]>min_)
				return true;
			if(i>=k)
				min_ = min(min_, sums[i-k+1]);
		}
		return false;
	}
};

int main()
{
	Solution s;
	int temp[] = {1,12,-5,-6,50,3};
	vector<int> in(temp, temp+sizeof(temp) / sizeof(int));
	int k = 3;
	printf("%f",s.maxAverageSubarray(in, k));
	return 0;
}