/*
给定一个只包含0,1的矩阵，找连续的1最多的区域有几个一
思路：
	广搜，定义一个与矩阵大小相同的visited矩阵标志[i][j]位置是否被搜索过
	若未被搜索过且为1则入队列且设为已经观察过，设cur为当前1的个数，出队列的时候加1
复杂度：
	时间：O(N^2)
	空间：O(N^2)
*/
#include<iostream>
#include<queue>
#include<vector>
using namespace std;

int maxOneArea(vector<vector<int>> arr)
{
	int row = arr.size();
	if(row==0)
		return 0;
	int col = arr[0].size();
	queue<pair<int, int>> q;
	vector<vector<bool>> visited(row, vector<bool>(col, false));
	int res = 0;
	for(int i=0;i<row;i++)
	{
		for(int j=0;j<col;j++)
		{
			if(arr[i][j]==1 && !visited[i][j])
			{
				q.push(make_pair(i,j));
				visited[i][j] = true;
			}
			int cur = 0;
			while(!q.empty())
			{
				int x=q.front().first, y=q.front().second;
				q.pop();
				cur++;
				if(x+1<row && arr[x+1][y]==1 && !visited[x+1][y])
				{
					q.push(make_pair(x+1,y));
					visited[x+1][y] = true;
				}
				if(y-1>=0 && arr[x][y-1]==1 && !visited[x][y-1])
				{
					q.push(make_pair(x,y-1));
					visited[x][y-1]=true;
				}
				if(x-1>=0 && arr[x-1][y]==1 && !visited[x-1][y])
				{
					q.push(make_pair(x-1,y));
					visited[x-1][y] = true;
				}
				if(y+1<col && arr[x][y+1]==1 && !visited[x][y+1])
				{
					q.push(make_pair(x, y+1));
					visited[x][y+1] = true;
				}
			}
			res = max(res, cur);
		}
	}
	return res;
}

int main()
{
	int n;
	cin>>n;
	vector<vector<int>> arr(n, vector<int>(n,0));
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
			cin>>arr[i][j];
	}
	cout<<maxOneArea(arr);
	system("pause");
	return 0;
}
