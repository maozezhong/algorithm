class Solution {
public:
    /*
    思路:
    dfs
    */
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> cur;
        dfs(s, cur, res);
        return res;
    }
    
    bool isPaldiron(string s)
    {
        return s==string(s.rbegin(), s.rend()); //反向迭代器，rbegin指向容器的最后一个元素，rend指向容器的第一个元素的前一个位置
    }
    
    void dfs(string s, vector<string> &cur, vector<vector<string>> &res)
    {
        if(s=="")
        {
            res.push_back(cur);
            return;
        }
        
        for(int i=1;i<=s.length();i++)
        {
            string temp = s.substr(0,i);
            if(isPaldiron(temp))
            {
                cur.push_back(temp);
                dfs(s.substr(i, s.length()-i), cur, res);
                cur.pop_back(); //dfs，回退，参考动图https://www.cnblogs.com/0kk470/p/7555033.html
            }
        }
    }
};